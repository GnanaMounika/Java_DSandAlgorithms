{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;\red157\green0\blue210;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;\cssrgb\c68627\c0\c85882;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Time complexity - O(n long)\
Space complexity O(n)\
When a stable sorting algorithm is required\
When the input data is large or when sorting linked lists \
When you have enough auxiliary space available.\
\
\
class\cf0 \strokec4  \cf5 \strokec5 Solution\cf0 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4 [] \cf6 \strokec6 sortArray\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 nums\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 start\cf0 \strokec4  =\cf8 \strokec8 0\cf0 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 end\cf0 \strokec4  = \cf7 \strokec7 nums\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4 -\cf8 \strokec8 1\cf0 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 helper\cf0 \strokec4 (nums,start,end);\cb1 \
\cb3       \cf9 \strokec9 return\cf0 \strokec4  nums;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf5 \strokec5 void\cf0 \strokec4  \cf6 \strokec6 helper\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  [] \cf7 \strokec7 nums\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 left\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 right\cf0 \strokec4 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf9 \strokec9 if\cf0 \strokec4 (left >= right)\{\cb1 \
\cb3             \cf9 \strokec9 return\cf0 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3             \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 mid\cf0 \strokec4  = left + (right-left)/\cf8 \strokec8 2\cf0 \strokec4 ;\cb1 \
\cb3             \cf6 \strokec6 helper\cf0 \strokec4 (nums,left,mid);\cb1 \
\cb3             \cf6 \strokec6 helper\cf0 \strokec4 (nums,mid+\cf8 \strokec8 1\cf0 \strokec4 ,right);\cb1 \
\cb3             \cf6 \strokec6 mergeSort\cf0 \strokec4 (nums,left,mid,right);\cb1 \
\cb3     \cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf5 \strokec5 void\cf0 \strokec4  \cf6 \strokec6 mergeSort\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 nums\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 start\cf0 \strokec4 ,\cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 mid\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 end\cf0 \strokec4 )\{\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 result\cf0 \strokec4  = \cf9 \strokec9 new\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4 [\cf7 \strokec7 nums\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 i\cf0 \strokec4  = start;\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 j\cf0 \strokec4  = mid + \cf8 \strokec8 1\cf0 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 k\cf0 \strokec4  = start;\cb1 \
\cb3         \cf9 \strokec9 while\cf0 \strokec4  (i <= mid && j <= end) \{\cb1 \
\cb3             \cf9 \strokec9 if\cf0 \strokec4  (nums[i] <= nums[j]) \{\cb1 \
\cb3                 result[k++] = nums[i++];\cb1 \
\cb3             \} \cf9 \strokec9 else\cf0 \strokec4  \{\cb1 \
\cb3                 result[k++] = nums[j++];\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf9 \strokec9 while\cf0 \strokec4  (i <= mid) \{\cb1 \
\cb3             result[k++] = nums[i++];\cb1 \
\cb3         \}\cb1 \
\cb3         \cf9 \strokec9 while\cf0 \strokec4  (j <= end) \{\cb1 \
\cb3             result[k++] = nums[j++];\cb1 \
\cb3         \}\cb1 \
\cb3         \cf9 \strokec9 for\cf0 \strokec4  (i = start; i <= end; i++) \{\cb1 \
\cb3         nums[i] = result[i];\cb1 \
\cb3     \}\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}